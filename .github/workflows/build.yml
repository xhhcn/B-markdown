name: Build and Release B-Markdown

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read

env:
  # 强制在GitHub Actions中使用最新的Node.js和npm
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        shell: bash
        run: |
          echo "All platforms: Using npm install to avoid rollup native dependency issues"
          rm -rf node_modules package-lock.json
          npm install

      - name: Check basic syntax and imports
        run: |
          # Clean any generated .d.ts files
          find . -name "*.d.ts" -not -path "./node_modules/*" -delete || true
          # Just check if Vite can parse the files (basic syntax check)
          npm run build || echo "Build check completed"

  build:
    needs: test
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        include:
          # Temporarily disabled - uncomment when needed
          # - os: ubuntu-latest
          #   platform: linux
          #   arch: x64
          # - os: windows-latest
          #   platform: win32
          #   arch: x64
          - os: macos-latest
            platform: darwin
            arch: x64
          - os: macos-latest
            platform: darwin
            arch: arm64
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        shell: bash
        run: |
          echo "All platforms: Using npm install to avoid rollup native dependency issues"
          rm -rf node_modules package-lock.json
          npm install

      # Temporarily disabled - uncomment when needed
      # - name: Build application (Linux)
      #   if: matrix.platform == 'linux'
      #   shell: bash
      #   run: |
      #     echo "Linux build: Installing platform-specific rollup binaries"
      #     npm install @rollup/rollup-linux-x64-gnu --no-save --force
      #     npm run build:linux
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Build application (Windows)
      #   if: matrix.platform == 'win32'
      #   shell: bash
      #   run: |
      #     echo "Windows build: Installing platform-specific rollup binaries"
      #     npm install @rollup/rollup-win32-x64-msvc --no-save --force
      #     npm run build:win
      #   env:
      #     GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build application (macOS)
        if: matrix.platform == 'darwin'
        shell: bash
        run: |
          echo "macOS build: Installing platform-specific rollup binaries"
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            npm install @rollup/rollup-darwin-arm64 --no-save --force
            echo "Building for Apple Silicon (arm64)"
          else
            npm install @rollup/rollup-darwin-x64 --no-save --force  
            echo "Building for Intel (x64)"
          fi
          
          # Clean release directory before build to avoid conflicts
          rm -rf release/
          
          # Build for specific architecture
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            npm run build:mac:dir:arm64
          else
            npm run build:mac:dir:x64
          fi
          
          # Fix permissions for macOS app based on architecture
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            chmod +x "release/mac-arm64/B-Markdown.app/Contents/MacOS/B-Markdown"
            echo "Fixed permissions for ARM64 build"
          else
            chmod +x "release/mac/B-Markdown.app/Contents/MacOS/B-Markdown"
            echo "Fixed permissions for Intel build"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List build outputs
        shell: bash
        run: ls -la release/

      # Temporarily disabled - uncomment when needed
      # - name: Upload build artifacts (Linux)
      #   if: matrix.platform == 'linux'
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: B-Markdown-linux-${{ matrix.arch }}
      #     path: |
      #       release/*.AppImage
      #       release/*.deb
      #       release/*.blockmap
      #     if-no-files-found: error

      # - name: Upload build artifacts (Windows)
      #   if: matrix.platform == 'win32'
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: B-Markdown-windows-${{ matrix.arch }}
      #     path: |
      #       release/*.exe
      #       release/*.blockmap
      #     if-no-files-found: error

      - name: Create ZIP archive for macOS app
        if: matrix.platform == 'darwin'
        shell: bash
        run: |
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            cd release/mac-arm64
            zip -r "../../B-Markdown-${{ matrix.arch }}-macos.zip" "B-Markdown.app"
            cd ../..
          else
            cd release/mac
            zip -r "../../B-Markdown-${{ matrix.arch }}-macos.zip" "B-Markdown.app"
            cd ../..
          fi
          echo "Created ZIP archive for ${{ matrix.arch }}"
          
          # Check file size
          ls -lh "B-Markdown-${{ matrix.arch }}-macos.zip"
          
      - name: Upload build artifacts (macOS)
        if: matrix.platform == 'darwin'
        uses: actions/upload-artifact@v4
        with:
          name: B-Markdown-macos-${{ matrix.arch }}
          path: |
            B-Markdown-${{ matrix.arch }}-macos.zip
          if-no-files-found: error

  auto-release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Get latest tag
        id: get-latest-tag
        shell: bash
        run: |
          # 获取最新的tag，如果没有则从v1.0.0开始
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "Latest tag: $latest_tag"
          
      - name: Calculate next version
        id: next-version
        shell: bash
        run: |
          latest_tag="${{ steps.get-latest-tag.outputs.latest_tag }}"
          
          # 如果是v0.0.0（表示没有tag），则从v1.0.0开始
          if [ "$latest_tag" = "v0.0.0" ]; then
            next_version="v1.0.0"
          else
            # 解析版本号并递增patch版本
            version_without_v="${latest_tag#v}"
            IFS='.' read -r major minor patch <<< "$version_without_v"
            patch=$((patch + 1))
            next_version="v${major}.${minor}.${patch}"
          fi
          
          echo "next_version=$next_version" >> $GITHUB_OUTPUT
          echo "Next version: $next_version"
          
      - name: Update package.json version
        shell: bash
        run: |
          next_version="${{ steps.next-version.outputs.next_version }}"
          version_without_v="${next_version#v}"
          sed -i "s/\"version\": \".*\"/\"version\": \"$version_without_v\"/" package.json
          echo "Updated package.json to version $version_without_v"
          
      - name: Commit version change
        shell: bash
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "chore: bump version to ${{ steps.next-version.outputs.next_version }}" || exit 0
          
      - name: Create and push tag
        shell: bash
        run: |
          next_version="${{ steps.next-version.outputs.next_version }}"
          git tag -a "$next_version" -m "Release $next_version"
          git push origin main
          git push origin "$next_version"
          echo "Created and pushed tag: $next_version"
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
        
      - name: Display structure of downloaded files
        shell: bash
        run: ls -la artifacts/
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.next-version.outputs.next_version }}
          name: "B-Markdown ${{ steps.next-version.outputs.next_version }}"
          body: |
            ## 🎉 B-Markdown ${{ steps.next-version.outputs.next_version }} 发布

            ### ✨ 特性
            - 💻 专业的Markdown编辑器
            - 🧮 完整的数学公式支持 (KaTeX)
            - 📄 PDF导出 (Default/Academic主题)
            - 🌐 中英文国际化
            - 🔍 搜索和替换功能
            - 🎨 实时预览

            ### 📦 支持平台
            - 🍎 **macOS**: Intel (x64) + Apple Silicon (arm64) 应用程序
            <!-- 暂时禁用，将来可能恢复
            - 🪟 **Windows**: x64 安装程序
            - 🐧 **Linux**: AppImage + Debian包
            -->

            ### 📋 更新内容
            此版本包含最新的功能改进和bug修复。

            ---
            **下载对应平台的安装包即可使用！**
          files: |
            artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}